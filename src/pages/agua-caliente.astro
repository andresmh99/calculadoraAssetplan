---
import CardHeader from "../components/CardHeader.astro";
import { color } from "../components/ColorSwitcher.astro";
import Cash from "../components/icons/Cash.astro";
import Ruler from "../components/icons/Ruler.astro";
import CardSection from "../components/layout/CardSection.astro";
import Layout from "../layouts/Layout.astro";
import InputElement from "../components/InputElement.astro";
import InputSection from "../components/InputSection.astro";
import dayjs from "dayjs";

import Api from '../components/Api'

const title = "Cálculo Agua Caliente";
const description =
  "Herramienta para calcular montos de agua caliente facturada en UF.";

const url = "https://api.cmfchile.cl/api-sbifv3/recursos_api/uf?apikey=e3a430efb353c799c749b220ea019b770d74a4f8&formato=json";
const UF = await fetch(url).then((res) => res.json());
const UFvalue = parseFloat(UF.UFs[0].Valor.replace(".", ""));
const fechaUF = dayjs(UF.UFs[0].Fecha).format("DD/MM/YYYY");

const m3Value: number = Math.round(UFvalue * 0.2);

const TAGS = {
  UF: {
    name: "UF",
    class: `size-6 ${color}`,
    icon: Ruler,
  },
  M3: {
    name: "Metro Cubico",
    class: `size-6 ${color}`,
    icon: Cash,
  },
};

const items = [
  {
    title: "Valor UF:",
    description: `Valor actualizado con fecha: ${fechaUF}`,
    icon: {
      name: "UF",
      class: `size-6 ${color}`,
      icon: Ruler,
    },
    value: UFvalue,
    link: "https://www.google.com/finance/quote/CLF-CLP?sa=X&ved=2ahUKEwi7mvq0k-OFAxXXH7kGHdyDCdoQmY0JegQIHhAp",
  },
  {
    title: " Valor m3:",
    description: "Cálculo a partir de valor contrato x precio UF",
    icon: {
      name: "Metro Cubico",
      class: `size-6 ${color}`,
      icon: Cash,
    },
    value: m3Value,
  },
];

const inputsElements = [
  {
    title: "Precio Contrato:",
    description: "Cantidad de UF pactadas en el Contrato",
    icon: "$",
    props: {
      id: "ufContrato",
      type: "number",
      min: "0",
    },
  },
  {
    title: "Lectura Inicial:",
    props: {
      id: "lecturaInicial",
      name: "lecturaInicial",
      type: "number",
      min: "0",
    },
  },
  {
    title: "Lectura Final:",
    props: {
      id: "lecturaFinal",
      name: "lecturaFinal",
      type: "number",
      min: "0",
    },
  },
];
---

<Layout title={title}>
  <CardSection>
    <CardHeader title={title} description={description}>
      {
        items.map((item) => (
          <div class="sm:col-span-3">
            <div class="group relative flex gap-x-6 rounded-lg p-4 bg-gray-50">
              <div class="mt-1 flex h-11 w-11 flex-none items-center justify-center rounded-lg bg-white">
                <item.icon.icon class={item.icon.class} />
              </div>
              <div>
                <a href={item.link} target="_blank" class=" text-gray-900">
                  <span class="font-semibold">
                    {item.title}{" "}
                    <strong class="font-bold text-indigo-600">
                      {item.value}{" "}
                    </strong>{" "}
                    CLP
                  </span>
                  <span class="absolute inset-0" />
                  <p>{item.description}</p>
                </a>
              </div>
            </div>
          </div>
        ))
      }
    </CardHeader>

    <div class="mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
      {
        inputsElements.map((input) => (
          <div class="sm:col-span-2">
            <InputSection
              title={input.title}
              description={input.description}
              icon={input.icon}
            >
              <InputElement {...input.props} />
            </InputSection>
          </div>
        ))
      }
    </div>
  </CardSection>
</Layout>
